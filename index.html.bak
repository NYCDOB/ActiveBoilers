<!DOCTYPE html>
<html>
  <title>Active Boilers</title>
  <meta name='viewport' content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no' />
  <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" />
  <link rel="stylesheet" type="text/css" href="https://nycdob.github.io/ActiveNB_A1enlargements/keen/keen-dashboards.css" />
  <link href='https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.css' rel='stylesheet' type='text/css'/>
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/dt/dt-1.10.12/r-2.1.0/se-1.2.0/datatables.min.css">
  <link href="https://nycdob.github.io/ActiveNB_A1enlargements/build/nv.d3.css" rel="stylesheet" type="text/css">
  <style>


body {
	background-color: white;
}
.logo{
	/* background-image: url('data/dob_transparent_highres.png'); */
	background-image: url('https://raw.githubusercontent.com/NYCDOB/CommunityProfiles_v2/gh-pages/dob_logo_white_transparent.png');
	background-repeat: no-repeat;
	background-position: center;
	float: right;
	background-size: 80px;
	height: 50px;
	width: 110px;	  
}
#map {
	height: 100%;
	width: 100%;
	pointer-events: all;
}

.pointGas{
	fill: #59a14f;
	fill-opacity: .7;
	stroke: #fff;

}
.pointOil{
	fill: #f28e2c;
	fill-opacity: .7;
	stroke: #fff;

}
.pointOilGas{
	fill: #b55a9d;
	fill-opacity: .7;
	stroke: #fff;

}
.pointElectric{
	fill: #DF3B20;
	fill-opacity: .7;
	stroke: #fff;

}
.pointUnknown{
	fill: #999A9C;
	fill-opacity: .5;
	stroke: #fff;

}
.tooltipBoilers {
	color: #222;
	background: #fff;
	padding: .5em;
	text-shadow: #f5f5f5 0 1px 0;
	border-radius: 7px; 
	box-shadow: 0px 0px 2px 0px #a6a6a6; 
	opacity: 0.9; 
	position: absolute;
	visibility: hidden;
}



/* @media( max-width:1200px){
	.dobmain	{
		padding-top:50px;
	}
	.legendShed {
		visibility:hidden;
	}
	.legendCD {
		visibility:hidden;
	}
	.ui {
		margin-top: -150px;
	}
}
@media ( max-width:2100px){
	.summarytxt_sheds {
		font-size: 12px !important;
	}
	.summarytxt_avgAge {
		font-size: 12px !important;
	}
	.summarytxt_feet {
		font-size: 12px !important;
	}
	#summary1_sheds {
		font-size: 25px !important;
	}
	#summary2_avgAge {
		font-size: 25px !important;
	}
	#summary3_feet {
		font-size: 25px !important;
	}
	.summarytxt {
		font-size: 12px !important;
	}
} */


svg {
	display: block;
}


#chart-01{
    box-sizing: border-box;
    width: 100%;
	<!-- height: 150px; -->
	height: 100%;
    <!-- border: 0.5px solid gray; -->
    float: left;
	background-color: #dfdfdf;
	<!-- margin: 0px 0px 12px; -->
}

#chart-boro-boilers{
    box-sizing: border-box;
    width: 100%;
	height: 200px;
    float: left;
	background-color: #dfdfdf;
	margin-bottom: 10px;
}
#chart-status{
    box-sizing: border-box;
    width: 100%;
	height: 200px;
    float: left;
	background-color: #dfdfdf;
	margin-bottom: 10px;
}
#boroBoilers{
	margin-top: 10px;
	padding: 0px;
	height: 150px;
	width: 100%;
	background-color: #fff;
}
#filingStatusChart{
	margin-top: 10px;
	padding: 0px;
	height: 140px;
	width: 100%;
	background-color: #fff;
}
#fueltype_gas{
	margin-top: 10px;
	padding: 0px;
	height: 180px;
	width: 100%;
	background-color: #fff;
}

#fueltype_oil{
	margin-top: 10px;
	padding: 0px;
	height: 180px;
	width: 100%;
	background-color: #fff;
}

#fueltype_oilgas{
	margin-top: 10px;
	padding: 0px;
	height: 170px;
	width: 100%;
	background-color: #fff;
}

#fueltype_electric{
	margin-top: 10px;
	padding: 0px;
	height: 180px;
	width: 100%;
	background-color: #fff;
}

#fueltype_unkown{
	margin-top: 10px;
	padding: 0px;
	height: 180px;
	width: 100%;
	background-color: #fff;
}

#boilers_total{
	margin-top: 10px;
	padding: 0px;
	height: 180px;
	width: 100%;
	background-color: #fff;
}

#chart-cycles{
    box-sizing: border-box;
    width: 100%;
	height: 200px;
    <!-- border: 0.5px solid gray; -->
    float: left;
	background-color: #dfdfdf;
	<!-- margin: 0px 0px 12px; -->
}

#chart-subcycles{
    box-sizing: border-box;
    width: 100%;
	height: 270px;
    <!-- border: 0.5px solid gray; -->
    float: left;
	background-color: #dfdfdf;
	<!-- margin: 0px 0px 12px; -->
}

.summarytxt{
	font-size: 22px;
	font-weight: bold;
	color: #7b7b7b;
	font-family: 'Open Sans', sans-serif; 
	font-family: 'Roboto', sans-serif;
	text-align: center;
	line-height: 97%;
	padding-top: 10px;
}

#summary1_sheds{
	font-size: 35px;
	font-weight: bold;
	color: #7899b0;
	font-family: 'Open Sans', sans-serif;
	font-family: 'Roboto', sans-serif;	
	text-align: center;
	line-height: 125%;
	
}

.fisphist {
	font-weight: 700;
	cursor: pointer;
}
.glyphicon {
    font-size: 10px;
	vertical-align: 30%
}
	  
.ui {
	top: 10px;
	left: 50px;
	padding: 8px;
	position: absolute;
	background: white;
	background: rgba(255,255,255,0.9);
	border: 2px solid #707070;
	box-shadow: 0 0 15px rgba(0,0,0,0.2);
	border-radius: 7px;
	width: 290px;
}



/* The switch - the box around the slider */
.switch {
  position: relative;
  display: inline-block;
  width: 32px;
  height: 20px;
}

/* Hide default HTML checkbox */
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

/* The slider */
.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: .4s;
  transition: .4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 12px;
  width: 12px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  -webkit-transition: .4s;
  transition: .4s;
}

input:checked + #sliderGas {
  background-color: #59a14f;
}

input:focus + #sliderGas {
  box-shadow: 0 0 1px #59a14f;
}
input:checked + #sliderOil {
  background-color: #f28e2c;
}

input:focus + #sliderOil {
  box-shadow: 0 0 1px #f28e2c;
}
input:checked + #sliderOilGas {
  background-color: #b55a9d;
}

input:focus + #sliderOilGas {
  box-shadow: 0 0 1px #b55a9d;
}
input:checked + #sliderElectric {
  background-color: #DF3B20;
}

input:focus + #sliderElectric {
  box-shadow: 0 0 1px #DF3B20;
}
input:checked + #sliderUnknown {
  background-color: #999A9C;
}

input:focus + #sliderUnknown {
  box-shadow: 0 0 1px #999A9C;
}
input:checked + .slider:before {
  -webkit-transform: translateX(12px);
  -ms-transform: translateX(12px);
  transform: translateX(12px);
}
#sliderTxt {
	line-height: 12px;
	vertical-align: middle;
}

.btn-primary{
	border: none;
}

#sub_gas{
	background-color: #59a14f;
	opacity:0.8;
}
#sub_gas:hover, #sub_gas:focus, #sub_gas:active, #sub_gas.active{
	background-color: #59a14f;
	opacity:1;
}
#sub_oil{
	background-color: #f28e2c;
	opacity:0.8;
}
#sub_oil:hover, #sub_oil:focus, #sub_oil:active, #sub_oil.active{
	background-color: #f28e2c;
	opacity:1;
}
#sub_oilGas{
	background-color: #b55a9d;
	opacity:0.8;
}
#sub_oilGas:hover, #sub_oilGas:focus, #sub_oilGas:active, #sub_oilGas.active{
	background-color: #b55a9d;
	opacity:1;
}
#sub_electric{
	background-color: #DF3B20;
	opacity:0.8;
}
#sub_electric:hover, #sub_electric:focus, #sub_electric:active, #sub_electric.active{
	background-color: #DF3B20;
	opacity:1;
}
#sub_unknown{
	background-color: #999A9C;
	opacity:0.8;
}
#sub_unknown:hover, #sub_unknown:focus, #sub_unknown:active, #sub_unknown.active{
	background-color: #999A9C;
	opacity:1;
}
#sub_total{
	background-color: #7899b0;
	opacity:0.8;
}
#sub_total:hover, #sub_total:focus, #sub_total:active, #sub_total.active{
	background-color: #7899b0;
	opacity:1;
}
.btn_fueltypes{
	padding-top: 10px;
	text-align: center;
}
.navbar-nav>li>a:visited{
	background-color:RGB(61,74,87);
}
#summary1_boilers{
	font-size: 35px;
	font-weight: bold;
	color: #547A95;
	font-family: 'Open Sans', sans-serif;
	font-family: 'Roboto', sans-serif;	
	text-align: center;
	line-height: 125%;
	
}

</style>
<body>
<div class="container">
			<div class="navbar navbar-fixed-top" role="navigation" style="color:white;background-color:RGB(61,74,87);">
			<a class="logo" href="https://www1.nyc.gov/site/buildings/index.page" target="_blank"> </a>
				<div class="nav navbar-nav" style="margin-left:15px;margin-top:10px;font-size:26px;font-weight:bold;text-align:center;">
					ACTIVE BOILERS
				</div>
				<!-- <ul class="nav navbar-nav navbar-right"> -->
						<!-- <li class="float-right small terms"><a href="https://www.nyc.gov/site/buildings/safety/parking-structure.page" style="color:white; margin-right:10px;" target="_blank">Filing Cycle Information</a></li> -->
				<!-- </ul> -->
			</div>
</div>
<div class="container-fluid dobmain" style="margin-top:60px;">
	<div class="row">
		  <div class="col-lg-9" style="height:89vh">
			  <div class="chart-stage" id="map-container" style="border:1px solid black;height:100%;width:100%">
					<div id="loadpage" style="position:absolute; 
						left:0px; top:0px; background-color:white; 
						layer-background-color:white; height:100%; 
						width:100%;"> 
						  <p align="center" style="font-size: large;">       
							<B>Loading ... Please wait!</B><br/><br/>
							<img src="data/spinner.gif">
						  </p>
					</div>
				<div id="map">								
				<svg></svg>
					<div id="ui-container" class="ui" style="z-index: 401">
						<h5><b>FUEL TYPE</b></h5>
						<h6>(TOGGLE LAYERS ON & OFF)</h6>

						<span style="display:inline-block;">
						<label class="switch">
							<input type="checkbox" checked="true" id="chkGas">
							<span class="slider" id="sliderGas"></span>						
						</label>
						
						<span class="en" id="sliderTxt">GAS</span>
						</span>
						<br/>

						<span style="display:inline-block;">
							<label class="switch">
								<input type="checkbox" checked="true" id="chkOil">
								<span class="slider" id="sliderOil"></span>
							</label>
							<span class="en" id="sliderTxt">OIL</span>
						</span>
						<br/>

						<span style="display:inline-block;">
							<label class="switch">
								<input type="checkbox" checked="true" id="chkOilGas">
								<span class="slider" id="sliderOilGas"></span>
							</label>
							<span class="en" id="sliderTxt">OIL & GAS</span>
						</span>
						<br/>

						<span style="display:inline-block;">
							<label class="switch">
								<input type="checkbox" checked="true" id="chkElectric">
								<span class="slider" id="sliderElectric"></span>
							</label>
							<span class="en" id="sliderTxt">ELECTRIC</span>
						</span>
						<br/>

						<span style="display:inline-block;">
							<label class="switch">
								<input type="checkbox" id="chkUnknown">
								<span class="slider" id="sliderUnknown"></span>
							</label>
							<span class="en" id="sliderTxt">UNKNOWN</span>
						</span>
						<br/>
					</div>
				</div>
			  </div>
		  </div>
		  <div class="col-lg-3" style="height:100%">
			<div class="newchart" style="padding:5px 5px 0px 5px;border:1px solid black;height:100%;width:100%;">
			
				<div class="chart-wrapper">
				  <div class="chart-stage" id="chart-01">
					<div class="summarytxt" >ACTIVE BOILERS UNIVERSE: </br>
						<span id="summary1_boilers"></span>
					</div>
				  </div>
				</div>
				<div class="chart-wrapper">
					<div class="chart-stage" id="chart-boro-boilers">
					<div class="summarytxt" >ACTIVE BOILERS BY BOROUGH</div>
					  <svg id="boroBoilers"></svg>
					</div>
				</div>
				<div class="chart-wrapper">
					<div class="chart-stage" id="chart-status">
					<div class="summarytxt" >FUEL TYPE</div>
					  <svg id="filingStatusChart"></svg>
					</div>
				</div>		
		
				<div class="chart-wrapper">
				  <div class="chart-stage" id="chart-subcycles">
					<div class="summarytxt" >FUEL TYPE BY BOROUGH </br><span id="summary4"></span></div>
					
					<div class="btn_fueltypes">
						<!-- <button class="btn btn-primary btn-sm active" id="sub_total" type="button" >TOTAL</button> -->
						<button class="btn btn-primary btn-sm" id="sub_gas" type="button" >GAS</button>
						<button class="btn btn-primary btn-sm" id="sub_oil" type="button" >OIL</button>
						<button class="btn btn-primary btn-sm" id="sub_oilGas" type="button" >OIL & GAS</button>
						<button class="btn btn-primary btn-sm" id="sub_electric" type="button" >ELECTRIC</button>
						<button class="btn btn-primary btn-sm" id="sub_unknown" type="button" >UNKNOWN</button>
					</div>
					
					<!-- <svg id="boilers_total"></svg>	 -->
					<svg id="fueltype_gas"></svg>
					<svg id="fueltype_oil"></svg>
					<svg id="fueltype_oilgas"></svg>
					<svg id="fueltype_electric"></svg>
					<svg id="fueltype_unkown"></svg>						
					</div>
				  </div>
				
				
			</div>
		  </div>
	</div>
	<p class="small text-muted" style=" position:relative; bottom:0px;">Built by DOB Analytics <a href="https://www1.nyc.gov/site/buildings/dob/analytics-reports.page" target="_blank">Dev Squad</a> | <a id="dlData" href="no-script.html">Download Data (csv)</a></p>	
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.9/d3.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/d3-format@3"></script>
<script src="https://nycdob.github.io/EssentialActiveConstruction/Leaflet.D3SvgOverlay-master/L.D3SvgOverlay.min.js"></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js'></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<script src="https://cdn.datatables.net/v/dt/dt-1.10.12/r-2.1.0/se-1.2.0/datatables.min.js"  type="text/javascript" charset="utf8" ></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chroma-js/2.4.2/chroma.min.js"></script>
<script src="https://nycdob.github.io/ActiveNB_A1enlargements/build/nv.d3.js"></script>
<script src="https://d3js.org/d3-time-format.v2.min.js"></script>
<script type="text/javascript" src="https://nycdob.github.io/ActiveNB_A1enlargements/keen/keen.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/rowgroup/1.1.1/js/dataTables.rowGroup.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.5.6/js/dataTables.buttons.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/buttons/1.5.6/js/buttons.html5.min.js"></script>
<script type="text/javascript" src="https://cdn.datatables.net/plug-ins/1.10.20/api/fnSortNeutral.js"></script>
<script>
$(document).ready(function(){
	var today = new Date();
	var dd = today.getDate();
	var mm = today.getMonth()+1;
	var yyyy = today.getFullYear();
	today = mm + '/' + dd + '/' + yyyy;	
	d3.select("#today").html(today);
	var latlong = [];
	var selection = [];
	var formatDate = d3.time.format("%-m/%-d/%Y").parse;
	var numberFormat = d3.format(",.0f");
	var legendNumFormat = d3.format(",");
	;localStorage.clear();
    L.Control.include({
      _refocusOnMap: L.Util.falseFn // Do nothing.
    });	
var map = L.map('map').setView([40.72809145215831, -73.995155119931], 14);
L.tileLayer('https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}.png', {attribution: 'Map tiles by <a href="http://stamen.com">Stamen Design</a>, <a href="http://creativecommons.org/licenses/by/3.0">CC BY 3.0</a> &mdash; Map data &copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(map);


var tooltipBoilers = d3.select('#map').append('div')//var tooltip = d3.select('body').append('div')
	.on('mouseover', function(d, i){
		tooltipBoilers.transition().duration(0);
	})
	.on('mouseout', function(d, i){
		tooltipBoilers.transition().delay(500).style('visibility', 'hidden');
	})
	.attr('class', 'tooltipBoilers');
	

	
var width = $("#map").width(),
	height = $("#map").height(),
	points = [],
	table_map = [],
	filteredData,
	latLngs = [],
	pointsOverlaySQFT,
	legendShed,
	legendCD,
	cat,
	cdSheds,
	sheds_CD,
	previousColor,
	radius;
	
onload = ready();

	
function ready(){

	pointsOverlaySQFT = L.d3SvgOverlay(function(sel,proj){
		var pointsUpdSQFT = sel.selectAll('circle').data(points);

		<!-- function pendVal(pend) {  -->
		<!-- if(pend=='Y'){ -->
			<!-- return 'TRUE'} else { -->
				<!-- return 'FALSE' -->
			<!-- } -->
		<!-- } -->
		pointsUpdSQFT.enter()
			.append('circle')		
			.attr('cx',function(d){return proj.latLngToLayerPoint(d.latLng).x;})
			.attr('cy',function(d){return proj.latLngToLayerPoint(d.latLng).y;})
			.attr('class', function(d){
				switch(d.energySource){
					case 'GAS':
						return 'pointGas';
						break;
					case 'OIL':
						return 'pointOil';
						break;
					case 'OIL & GAS':
						return 'pointOilGas';
						break;
					case 'ELECTRIC':
						return 'pointElectric';
						break;
					case 'UNKNOWN':
						return 'pointUnknown';
						break; 
				}
			})
			
			.on('click', function(d){

				if(d3.select(this).style("fill-opacity") != 0){
					tooltipBoilers.style("visibility", "visible");
					tooltipBoilers.html(
						'BIN: ' + d.bin + '</br>' +								
						'ADDRESS: '+ d.Address + '</br>' +
						'BOROUGH: '+ d.Borough + '</br>' +
						'BLOCK: ' + d.block + '</br>' +	
						'LOT: ' + d.lot + '</br>' +	
						'FUEL TYPE: ' + d.energySource + '</br>' +	
						'STATUS: ' + d.boilerStatus + '</br>' +	
						'BOILER COUNT AT BIN: ' + d.boilerCount

			//'<br><span class="fisphist">FISP History <span class="glyphicon glyphicon-new-window"></span></span>'			
						
                        //'<br><div class="fisphist" style="background-color:red;"> XX</div>'
					)
					if (d3.event.pageX > (width - 200)) {
					   tooltipBoilers.style("left", (d3.event.pageX - 350) + "px");
					} else {
					   tooltipBoilers.style("left", (d3.event.pageX + 20) + "px")
							.style("top", (d3.event.pageY -30) + "px");
					}
					if (d3.event.pageY > (height - 150)) {
					   tooltipBoilers.style("top", (d3.event.pageY -100) + "px");
					} else {
					   tooltipBoilers.style("top", (d3.event.pageY -30) + "px");
					}
				}

    			//document.querySelector(".fisphist").addEventListener('click', e=>  {
				//localStorage.setItem('cathyBIN',d.Bin); window.open('https://nycdob.github.io/FISPHistory/fisphistory.html',"fisphist")   })
        
        
        
        
			})
			.on("mouseover", function(d, i){
				previousColor = d3.select(this).style("fill");
				previousOpacity = d3.select(this).style("fill-opacity");
				tooltipBoilers.transition().duration(0); 
				$(this).attr("style", "cursor: pointer; fill: #DFEB1B; fill-opacity: 0.7;");			
			})
			.on("mouseout", function(d, i){			
				d3.select(this).style("fill",previousColor);
				//d3.select(this).style( "fill-opacity",0.7);
				d3.select(this).style("fill-opacity",previousOpacity);
				return tooltipBoilers.transition().delay(500).style("visibility", "hidden");
			});
		
			pointsUpdSQFT.attr("stroke-width", 1 / proj.scale);
			pointsUpdSQFT.attr("r", 5 /proj.scale);



			var gasSlider = document.querySelector('input[id="chkGas"]');
				oilSlider = document.querySelector('input[id="chkOil"]');
				oilGasSlider = document.querySelector('input[id="chkOilGas"]');
				electricSlider = document.querySelector('input[id="chkElectric"]');
				unknownSlider = document.querySelector('input[id="chkUnknown"]');
				
				gasSlider.onchange = function(){
						if(this.checked){
							d3.selectAll(".pointGas").filter(function(d) {
								return d.energySource == "GAS";
							})
							.style("display", "block");	

						} else {
							d3.selectAll(".pointGas").filter(function(d) {
								return d.energySource == "GAS";
							})
							.style("display", "none");
										
						}
				};		
				
				oilSlider.onchange = function(){
						if(this.checked){
							d3.selectAll(".pointOil").filter(function(d) {
								return d.energySource == "OIL";
							})
							.style("display", "block");	

						} else {
							d3.selectAll(".pointOil").filter(function(d) {
								return d.energySource == "OIL";
							})
							.style("display", "none");
										
						}
				};

				oilGasSlider.onchange = function(){
						if(this.checked){
							d3.selectAll(".pointOilGas").filter(function(d) {
								return d.energySource == "OIL & GAS";
							})
							.style("display", "block");	

						} else {
							d3.selectAll(".pointOilGas").filter(function(d) {
								return d.energySource == "OIL & GAS";
							})
							.style("display", "none");
										
						}
				};

				electricSlider.onchange = function(){
						if(this.checked){
							d3.selectAll(".pointElectric").filter(function(d) {
								return d.energySource == "ELECTRIC";
							})
							.style("display", "block");	

						} else {
							d3.selectAll(".pointElectric").filter(function(d) {
								return d.energySource == "ELECTRIC";
							})
							.style("display", "none");
										
						}
				};

				unknownSlider.onchange = function(){
						if(this.checked){
							d3.selectAll(".pointUnknown").filter(function(d) {
								return d.energySource == "UNKNOWN";
							})
							.style("display", "block");	

						} else {
							d3.selectAll(".pointUnknown").filter(function(d) {
								return d.energySource == "UNKNOWN";
							})
							.style("display", "none");
										
						}
				};
				
		
	});
	
	
	 
		//d3.csv("https://raw.githubusercontent.com/NYCDOB/data_store/master/facadeLL11_v3.csv",function(data){
		d3.csv("data/ActiveBoilers.csv",function(data){
				points = data.filter(function(d) {
					//if( ((+d["Lat"] != 0) && (+d["Lon"] !=0 )) && (([d.Cycle] == "9A") || [d.Cycle] == "9B" || [d.Cycle] == "9C") ) {
					if( d.BoilerStatusName == "Active" ) {
						return d;
					}
				}).map(function(d){
				d.latLng = [+d["P_LATITUDE"],+d["P_LONGITUDE"]];
				d.bin = [d.PremisesBIN];
				d.Borough = [d.PremisesBoroughName];
				d.Address = [d.Address];
				d.block = [d.PremisesBlock];
				d.lot = [d.PremisesLot];
				d.boilerStatus = d["BoilerStatusName"].toUpperCase();
				d.energySource = d["BurnerExistingEnergySource"].toUpperCase();
				d.boilerCount = d["Count of Boilers per BIN"];
				d.boilerID = [d.BoilerId];
			return d;
			});
			

			pointsOverlaySQFT.addTo(map);
			
			d3.selectAll(".pointGas").style("display", "block");
			d3.selectAll(".pointOil").style("display", "block");
			d3.selectAll(".pointOilGas").style("display", "block");
			d3.selectAll(".pointElectric").style("display", "block");
			d3.selectAll(".pointUnknown").style("display", "none");
			
						

		//CHARTS
			
			//TOTAL ACTIVE BOILERS
			var totalBoiler = points.map(function(d) { return d.boilerID });
			console.log(totalBoiler);
			d3.select("#summary1_boilers").html(numberFormat(totalBoiler.length));
			
			//BOROUGH			
			var nestBoroBoiler = d3.nest()
				.key(function(d){return d.Borough;})//.sortKeys(d3.ascending)
				.rollup(function(v) { 
					return v.length;
				})
				.entries(points)
				.sort(function(a, b){ return d3.descending(a.values, b.values); })
				console.log(nestBoroBoiler);
				boilerBoroChart(nestBoroBoiler);

			//CURRENT STATUS			
			var nestEnergySource = d3.nest()
				.key(function(d){return (d.energySource).toUpperCase();})//.sortKeys(d3.ascending)
				.rollup(function(v) { 
					return v.length;
				})
				.entries(points)
				.sort(function(a, b){ return d3.descending(a.values, b.values); })
				console.log(nestEnergySource);
				statusChart(nestEnergySource);
				
			/*	
			//SUB CYCLES
			var nestCycles = d3.nest()
				.key(function(d) { return d.cycle; })
				.rollup(function(v) {
					return v.length;
				})			
				.entries(points)
				//.sort(function(a, b){ return d3.descending(a.values, b.values); })//.slice(0,5);	
			console.log(nestCycles);
			cycleChart(nestCycles);
			
			//NRF SUB CYCLES
			var filterVals=points.filter(function(d){
				return ((d["CN Filing Status"]=="No Report Filed"))
			})
			var nestPending = d3.nest()
				.key(function(d) { return d.cycle; })
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
				//.sort(function(a, b){ return d3.descending(a.values, b.values); })//.slice(0,5);	
			//console.log(nestPending);
			pendChart(nestPending);
			*/
			/*
			//PENDING INSPECTIONS
			var nestPending = d3.nest()
				.key(function(d) { 
					if(d.pending=='Y'){
						return 'TRUE'} else {
							return 'FALSE'
						}
					 })
				.rollup(function(v) {
					return v.length;
				})
				.entries(points)
				.sort(function(a, b){ return d3.descending(a.values, b.values); })//.slice(0,5);	
			//console.log(nestPending);
			//pendChart(nestPending);
			*/


			//GAS FUEL TYPE
			var filterVals=points.filter(function(d){
				return ((d.BurnerExistingEnergySource=="Gas"))
			})
			var nestGas = d3.nest()
				.key(function(d) { return d.Borough; }).sortKeys(d3.ascending)
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
				.sort(function(a, b){ return d3.descending(a.values, b.values); })
			gasChart(nestGas);
			
			//OIL FUEL TYPE
			var filterVals=points.filter(function(d){
				return ((d.BurnerExistingEnergySource=="Oil"))
			})
			var nestOil = d3.nest()
				.key(function(d) { return d.Borough; }).sortKeys(d3.ascending)
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
				.sort(function(a, b){ return d3.descending(a.values, b.values); })
			oilChart(nestOil);
			
			//OIL & GAS FUEL TYPE
			var filterVals=points.filter(function(d){
				return ((d.BurnerExistingEnergySource=="Oil & Gas"))
			})
			var nestOilGas = d3.nest()
				.key(function(d) { return d.Borough; }).sortKeys(d3.ascending)
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
				.sort(function(a, b){ return d3.descending(a.values, b.values); })
			oilGasChart(nestOilGas);
			
			//ELECTRIC FUEL TYPE
			var filterVals=points.filter(function(d){
				return ((d.BurnerExistingEnergySource=="Electric"))
			})
			var nestElectric = d3.nest()
				.key(function(d) { return d.Borough; }).sortKeys(d3.ascending)
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
				.sort(function(a, b){ return d3.descending(a.values, b.values); })
			electricChart(nestElectric);
			
			//UNKNOWN FUEL TYPE
			var filterVals=points.filter(function(d){
				return ((d.BurnerExistingEnergySource=="UNKNOWN"))
			})
			var nestUnknown = d3.nest()
				.key(function(d) { return d.Borough; }).sortKeys(d3.ascending)
				.rollup(function(v) {
					return v.length;
				})			
				.entries(filterVals)
				.sort(function(a, b){ return d3.descending(a.values, b.values); })
			unknownChart(nestUnknown);
				
			function boilerBoroChart(data){
				var boilerBoroData = [
					{
						key: "totals",
						values: []
					}
				];

				// populate the empty object with your data
				data.forEach(function (d){
					d.values = +d.values
					boilerBoroData[0].values.push(d)
				})     
				
				
				nv.addGraph(function() {				
					var chart = nv.models.discreteBarChart()
						.x(function (d) {  
							return d.key 
						})
						.y(function (d) { 
							return d.values 
						})
						.duration(250)
						.margin({top: 15, right: 10, bottom: 20, left: 50})
						.color(['#7899b0']);
					chart.yAxis.tickFormat(d3.format(','));

					chart.xAxis.tickFormat(function(d){
						if (typeof this != 'undefined') {
						 var el = d3.select(this);
						 var p = d3.select(this.parentNode);
						 p.append("foreignObject")
							.attr('x', -100)
							.attr("width", 200)
							.attr("height", 200)
							.append("xhtml:p")
							.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif;')
							.html(d);    
							el.remove();
							return d;
						}
					});		
					
					d3.select('#chart-boro-boilers svg')
							.datum(boilerBoroData)
							.transition().duration(250)
							.call(chart);
					nv.utils.windowResize(chart.update);
					return chart;
				});
			}

			function statusChart(data){
				var statusData = [
					{
						key: "totals",
						values: []
					}
				];

				// populate the empty object with your data
				data.forEach(function (d){
					d.values = +d.values
					statusData[0].values.push(d)
				})     
				
				
				nv.addGraph(function() {				
					var chart = nv.models.discreteBarChart()
						.x(function (d) {  
							return d.key 
						})
						.y(function (d) { 
							return d.values 
						})
						.duration(250)
						.margin({top: 15, right: 10, bottom: 20, left: 50})
						.color(['#7899b0']);
					chart.yAxis.tickFormat(d3.format(','));

					chart.xAxis.tickFormat(function(d){
						if (typeof this != 'undefined') {
						 var el = d3.select(this);
						 var p = d3.select(this.parentNode);
						 p.append("foreignObject")
							.attr('x', -100)
							.attr("width", 200)
							.attr("height", 200)
							.append("xhtml:p")
							.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif;')
							.html(d);    
							el.remove();
							return d;
						}
					});		
					
					d3.select('#chart-status svg')
							.datum(statusData)
							.transition().duration(250)
							.call(chart);
					nv.utils.windowResize(chart.update);
					return chart;
				});
			}

			<!-- $('#sub_total').click(function(){ -->
				<!-- $('#boilers_total').show(); -->
			   <!-- $('#fueltype_gas').hide(); -->
			   <!-- $('#fueltype_oil').hide(); -->
			   <!-- $('#fueltype_oilgas').hide(); -->
			   <!-- $('#fueltype_electric').hide(); -->
			   <!-- $('#fueltype_unkown').hide(); -->
			   
			<!-- });			 -->
			$('#sub_gas').click(function(){
			   $('#fueltype_gas').show();
			   $('#fueltype_oil').hide();
			   $('#fueltype_oilgas').hide();
			   $('#fueltype_electric').hide();
			   $('#fueltype_unkown').hide();
			   <!-- $('#boilers_total').hide(); -->
			});
			$('#sub_oil').click(function(){
			   $('#fueltype_gas').hide();
			   $('#fueltype_oil').show();
			   $('#fueltype_oilgas').hide();
			   $('#fueltype_electric').hide();
			   $('#fueltype_unkown').hide();
			   <!-- $('#boilers_total').hide(); -->
			});
			$('#sub_oilGas').click(function(){
			   $('#fueltype_gas').hide();
			   $('#fueltype_oil').hide();
			   $('#fueltype_oilgas').show();
			   $('#fueltype_electric').hide();
			   $('#fueltype_unkown').hide();
			   <!-- $('#boilers_total').hide(); -->
			});	
			$('#sub_electric').click(function(){
			   $('#fueltype_gas').hide();
			   $('#fueltype_oil').hide();
			   $('#fueltype_oilgas').hide();
			   $('#fueltype_electric').show();
			   $('#fueltype_unkown').hide();
			   <!-- $('#boilers_total').hide(); -->
			});	
			$('#sub_unknown').click(function(){
			   $('#fueltype_gas').hide();
			   $('#fueltype_oil').hide();
			   $('#fueltype_oilgas').hide();
			   $('#fueltype_electric').hide();
			   $('#fueltype_unkown').show();
			   <!-- $('#boilers_total').hide(); -->
			});	
			$('.btn_fueltypes').on('click', '.btn', function() {
			  $(this).addClass('active').siblings().removeClass('active');
			});
	/*		
	function cycleChart(data){
				var parkCDData = [
					{
						key: "totals",
						values: []
					}
				];

				// populate the empty object with your data
				data.forEach(function (d){
					d.values = +d.values
					parkCDData[0].values.push(d)
				})     
				
				
				nv.addGraph(function() {				
					var chart = nv.models.discreteBarChart()
						.x(function (d) {  
							return d.key 
						})
						.y(function (d) { 
							return d.values 
						})
						.duration(250)
						.margin({top: 15, right: 10, bottom: 20, left: 50})
						.color(['#7899b0']);
					chart.yAxis.tickFormat(d3.format(','));

					chart.xAxis.tickFormat(function(d){
						if (typeof this != 'undefined') {
						 var el = d3.select(this);
						 var p = d3.select(this.parentNode);
						 p.append("foreignObject")
							.attr('x', -100)
							.attr("width", 200)
							.attr("height", 200)
							.append("xhtml:p")
							.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif;')
							.html(d);    
							el.remove();
							return d;
						}
					});										

					d3.select('#boilers_total')
							.datum(parkCDData)
							.transition().duration(250)
							.call(chart);
					nv.utils.windowResize(chart.update);
					return chart;
				});
			}
			*/
			 function gasChart(data){
			 	var safeData = [
			 		{
			 			key: "totals",
			 			values: []
			 		}
			 	];

			 	 //populate the empty object with your data
			 	data.forEach(function (d){
			 		d.values = +d.values
			 		safeData[0].values.push(d)
			 	})     
								
			 		nv.addGraph(function() {				
			 			var chart = nv.models.discreteBarChart()
			 				.x(function (d) {  
			 					return d.key 
			 				})
			 				.y(function (d) { 
			 					return d.values 
			 				})
			 				.duration(250)
			 				.margin({top: 15, right: 10, bottom: 20, left: 50})
			 				.color(['#59a14f']);
			 			chart.yAxis.tickFormat(d3.format(','));

			 			//chart.xAxis.axisLabelDistance(10);
			 			chart.xAxis.tickFormat(function(d){
			 				if (typeof this != 'undefined') {
			 				var el = d3.select(this);
			 				var p = d3.select(this.parentNode);
			 				p.append("foreignObject")
			 					.attr('x', -100)
			 					.attr("width", 200)
			 					.attr("height", 200)
			 					.append("xhtml:p")
			 					.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif; pointer-events: auto;')
			 					.html(d);
			 					el.remove();
			 					return d;
			 				}

			 			});	

											
			 				d3.select('#fueltype_gas')
			 						.datum(safeData)
			 						.transition().duration(250)
			 						.call(chart);
			 				nv.utils.windowResize(chart.update);
			 				return chart;
			 		}
			 	);
				
			 }			
			
			 function oilChart(data){
			 	var sremData = [
			 		{
			 			key: "totals",
			 			values: []
			 		}
			 	];

			 	 //populate the empty object with your data
			 	data.forEach(function (d){
			 		d.values = +d.values
			 		sremData[0].values.push(d)
			 	})     
								
			 		nv.addGraph(function() {				
			 			var chart = nv.models.discreteBarChart()
			 				.x(function (d) {  
			 					return d.key 
			 				})
			 				.y(function (d) { 
			 					return d.values 
			 				})
			 				.duration(250)
			 				.margin({top: 15, right: 10, bottom: 20, left: 50})
			 				.color(['#f28e2c']);
			 			chart.yAxis.tickFormat(d3.format(','));

			 			chart.xAxis.axisLabelDistance(10);
			 			chart.xAxis.tickFormat(function(d){
			 				if (typeof this != 'undefined') {
			 				var el = d3.select(this);
			 				var p = d3.select(this.parentNode);
			 				p.append("foreignObject")
			 					.attr('x', -100)
			 					.attr("width", 200)
			 					.attr("height", 200)
			 					.append("xhtml:p")
			 					.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif; pointer-events: auto;')
			 					.html(d);
			 					el.remove();
			 					return d;
			 				}

			 			});	
										
			 				d3.select('#fueltype_oil')
			 						.datum(sremData)
			 						.transition().duration(250)
			 						.call(chart);
			 				nv.utils.windowResize(chart.update);
			 				return chart;
			 		}
			 	);
				
			 }			

			 function oilGasChart(data){
			 	var swarmpExpData = [
			 		{
			 			key: "totals",
			 			values: []
			 		}
			 	];

			 	 //populate the empty object with your data
			 	data.forEach(function (d){
			 		d.values = +d.values
			 		swarmpExpData[0].values.push(d)
			 	})     
								
			 		nv.addGraph(function() {				
			 			var chart = nv.models.discreteBarChart()
			 				.x(function (d) {  
			 					return d.key 
			 				})
			 				.y(function (d) { 
			 					return d.values 
			 				})
			 				.duration(250)
			 				.margin({top: 15, right: 10, bottom: 20, left: 50})
			 				.color(['#b55a9d']);
			 			chart.yAxis.tickFormat(d3.format(','));

			 			chart.xAxis.axisLabelDistance(10);
			 			chart.xAxis.tickFormat(function(d){
			 				if (typeof this != 'undefined') {
			 				var el = d3.select(this);
			 				var p = d3.select(this.parentNode);
			 				p.append("foreignObject")
			 					.attr('x', -100)
			 					.attr("width", 200)
			 					.attr("height", 200)
			 					.append("xhtml:p")
			 					.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif; pointer-events: auto;')
			 					.html(d);
			 					el.remove();
			 					return d;
			 				}

			 			});	
											
			 				d3.select('#fueltype_oilgas')
			 						.datum(swarmpExpData)
			 						.transition().duration(250)
			 						.call(chart);
			 				nv.utils.windowResize(chart.update);
							 
			 				return chart;
			 		}
			 	);
				
			 }			

			 function electricChart(data){
			 	var unsafeData = [
			 		{
			 			key: "totals",
			 			values: []
			 		}
			 	];

			 	 //populate the empty object with your data
			 	data.forEach(function (d){
			 		d.values = +d.values
			 		unsafeData[0].values.push(d)
			 	})     
								
			 		nv.addGraph(function() {				
			 			var chart = nv.models.discreteBarChart()
			 				.x(function (d) {  
			 					return d.key 
			 				})
			 				.y(function (d) { 
			 					return d.values 
			 				})
			 				.duration(250)
			 				.margin({top: 15, right: 10, bottom: 20, left: 50})
			 				.color(['#DF3B20']);
			 			chart.yAxis.tickFormat(d3.format(','));

			 			chart.xAxis.axisLabelDistance(10);
			 			chart.xAxis.tickFormat(function(d){
			 				if (typeof this != 'undefined') {
			 				var el = d3.select(this);
			 				var p = d3.select(this.parentNode);
			 				p.append("foreignObject")
			 					.attr('x', -100)
			 					.attr("width", 200)
			 					.attr("height", 200)
			 					.append("xhtml:p")
			 					.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif; pointer-events: auto;')
			 					.html(d);
			 					el.remove();
			 					return d;
			 				}

			 			});	
											
			 				d3.select('#fueltype_electric')
			 						.datum(unsafeData)
			 						.transition().duration(250)
			 						.call(chart);
			 				nv.utils.windowResize(chart.update);
			 				return chart;
			 		}
			 	);
				
			 }
			
			 function unknownChart(data){
			 	var nrfData = [
			 		{
			 			key: "totals",
			 			values: []
			 		}
			 	];

			 	 //populate the empty object with your data
			 	data.forEach(function (d){
			 		d.values = +d.values
			 		nrfData[0].values.push(d)
			 	})     
								
			 		nv.addGraph(function() {				
			 			var chart = nv.models.discreteBarChart()
			 				.x(function (d) {  
			 					return d.key 
			 				})
			 				.y(function (d) { 
			 					return d.values 
			 				})
			 				.duration(250)
			 				.margin({top: 15, right: 10, bottom: 20, left: 50})
			 				.color(['#999A9C']);
			 			chart.yAxis.tickFormat(d3.format(','));

			 			chart.xAxis.axisLabelDistance(10);
			 			chart.xAxis.tickFormat(function(d){
			 				if (typeof this != 'undefined') {
			 				var el = d3.select(this);
			 				var p = d3.select(this.parentNode);
			 				p.append("foreignObject")
			 					.attr('x', -100)
			 					.attr("width", 200)
			 					.attr("height", 200)
			 					.append("xhtml:p")
			 					.attr('style','word-wrap: break-word; text-align:center; font: normal 9px sans-serif; pointer-events: auto;')
			 					.html(d);
			 					el.remove();
			 					return d;
			 				}

			 			});	
											
			 				d3.select('#fueltype_unkown')
			 						.datum(nrfData)
			 						.transition().duration(250)
			 						.call(chart);
			 				nv.utils.windowResize(chart.update);
			 				return chart;
			 		}
			 	);
				
			 }
			
	});	
	
		
}

	$('#dlData').click(function(e) {
		e.preventDefault();  //stop the browser from following
		window.location.href = 'data/ActiveBoilers.csv';
		
	});
	
});	

</script>
</body>
</html>